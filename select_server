#include "sock_lib.h"

#define MAX_CLIENTS 100

int16_t digit_summer(int number)
{
    printf("Number : %d\n",number);
    int16_t res = 0;
    int i=0;
    while(number > 0)
    {
        res += number % 10;
        number /= 10;
    }
    printf("Result : %d\n",res);
    return res;
}

void multiple_socket_server(int server_socket)
{
    fd_set reading,writing;
    FD_ZERO(&reading); FD_ZERO(&writing);
    FD_SET(server_socket,&reading);
    int nfd = server_socket + 1;
    int select_status;
    int16_t results[100];
    while(1)
    {
        fd_set reading_copy = reading; fd_set writing_copy = writing;
        select_status = select(FD_SETSIZE,&reading_copy,&writing_copy,NULL,NULL);
        if(select_status < 0)
            ERR("select");
        for (int i=0;i<FD_SETSIZE;i++)
        {
            if(FD_ISSET(i,&reading_copy))
            {
                if(i == server_socket)
                {
                    int client_socket = add_new_client(server_socket);
                    if(nfd < client_socket + 1)
                        nfd = client_socket + 1;
                    FD_SET(client_socket,&reading);
                    
                }
                else
                {
                    int16_t client_reply;
                    int status = recv(i,&client_reply,sizeof(client_reply),0);
                    client_reply = ntohs(client_reply);
                    results[i] = digit_summer((client_reply));
                    printf("Client : %d\n",(client_reply));
                    FD_SET(i,&writing);
                }
            }
        }
        for (int i=0;i<FD_SETSIZE;i++)
        {
            if(FD_ISSET(i,&writing_copy))
            {
                printf("Answer : %d\n", results[i]);
                results[i] = htons(results[i]);
                send(i,&results[i],results[i],0);
                FD_CLR(i,&reading);
                FD_CLR(i,&writing);
            }
        }
    }
}
int main(int argc, char **argv)
{
    struct sockaddr_un addr;
    int server_socket = bind_tcp_socket((uint16_t)atoi(argv[1]),1);
    multiple_socket_server(server_socket);
    close(server_socket);
    exit(EXIT_SUCCESS);
}
