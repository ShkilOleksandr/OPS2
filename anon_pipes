#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>
#include <signal.h>

#define MIN_STUDENTS 4
#define MAX_STUDENTS 20

#define ERR(source) \
    (fprintf(stderr, "%s:%d\n", __FILE__, __LINE__), perror(source), kill(0, SIGKILL), exit(EXIT_FAILURE))

#ifndef TEMP_FAILURE_RETRY
#define TEMP_FAILURE_RETRY(expression)             \
    (__extension__({                               \
        long int __result;                         \
        do                                         \
            __result = (long int)(expression);     \
        while (__result == -1L && errno == EINTR); \
        __result;                                  \
    }))
#endif

int sethandler(void (*f)(int), int sigNo)
{
    struct sigaction act;
    memset(&act, 0, sizeof(struct sigaction));
    act.sa_handler = f;
    if (-1 == sigaction(sigNo, &act, NULL))
        return -1;
    return 0;
}

typedef struct connection
{
    int p[2];
    int pid;
}connection;

int alarm_ = 0;

int set_handler(void (*f)(int), int sig)
{
    struct sigaction act = {0};
    act.sa_handler = f;
    if (sigaction(sig, &act, NULL) == -1)
        return -1;
    return 0;
}

void alarm_receiver(int sig)
{
    if(sig  == SIGALRM)
        alarm_ = 1;
}
void child_job(connection individual[], int my_index, int shared[])
{
    srand(time(NULL));
    if(close(individual[my_index].p[1]))
        ERR("close");
    if(close(shared[0]))
        ERR("close");
    char teacher[100];
    read(individual[my_index].p[0], teacher, sizeof(teacher));
    snprintf(teacher, sizeof(teacher), "Student [%d] : I am HERE!\n",getpid());
    write(shared[1], teacher, sizeof(teacher));
    printf("%s",teacher);
    //presence check done

    sigset_t mask, oldmask;
    sigemptyset(&mask);
    sigaddset(&mask, SIGALRM);
    sigprocmask(SIG_BLOCK, &mask, &oldmask);

    int t = rand()%401 + 100;
    struct timespec waiting;
    waiting.tv_sec = 0;
    waiting.tv_nsec = (t%1000)*1000000;
    

    int k = rand()%7 + 3; 
    int q = rand()%19 + 1;

    char stage_report[100];
    ((int*)stage_report)[0] = k + q;
    ((int*)stage_report)[1] = getpid();
    int current;

    for(int i=0;i<5;i++)
    {
        nanosleep(&waiting, NULL);
        //printf("student [ %d ] doing stage %d\n", getpid(), i+1);
        q = rand()%19 + 1;
        ((int*)stage_report)[0] = k + q;
        ((int*)stage_report)[1] = getpid();
        TEMP_FAILURE_RETRY(write(shared[1], stage_report, 2*sizeof(int)));

        TEMP_FAILURE_RETRY(read(individual[my_index].p[0],teacher,sizeof(int)));
        if(*(int*)teacher==-2)
        {
            current = i;
            i = 100;
            continue;
        }
        if(*(int*)teacher)
            i--;
        //printf("In the loop\n");
    }
    fflush(stdout);
    if(*(int*)teacher == -2)
    {       
            fflush(stdout);
            printf("Student [ %d ] not finished %d\n", getpid(), current+1);
    }
    else
    {
        fflush(stdout);
        printf("[%d] Student : I nailed it!\n",getpid());
    }
    fflush(stdout);
    
    ((int*)stage_report)[0] = -1;
    ((int*)stage_report)[1] = getpid();
    write(shared[1], stage_report, 2*sizeof(int));
    if(close(individual[my_index].p[0]))
        ERR("close");
    if(close(shared[1]))
        ERR("close");
    fflush(stdout);
    //printf("Student after closing\n");
}

int find_index(connection indi[],int n, int pid)
{
    for(int i=0;i<n;i++)
    {
        if(indi[i].pid == pid)
            return i;
    }
    return -1;
}

void parent_work(connection individual[], int n, int shared[])
{
    sethandler(alarm_receiver,SIGALRM);
    for(int i=0;i<n;i++)
    {
        if(close(individual[i].p[0]))
            ERR("close");
    }
    if(close(shared[1]))
        ERR("close");

    //sending messages
    char buffer[100]={0};
    int ready_students[20]={0};
    for(int i=0;i<n;i++)
    {
        snprintf(buffer, sizeof(buffer), "Is [%d] here?\n", individual[i].pid);
        write(individual[i].p[1],buffer, sizeof(buffer));
        printf("Is student [%d] here?\n", individual[i].pid);
    }
    alarm(1);
    //presence has been checked;
    char student[100];
    int ready = 0;
    while(ready < n)
    {
        if(alarm_)
        {
            for(int i=0;i<n;i++)
            {
                if(ready_students[i])
                    continue;
            
                ((int*)student)[0] = -2;
                write(individual[i].p[1], student, sizeof(int));
            }

            break;
        }
        
        read(shared[0],student, 2*sizeof(int));
        int index = find_index(individual, n, ((int*)student)[1]);
        if(((int*)student)[0] == -1)
            {
                ready_students[index] = 1;
                ready++;
                continue;
            }
        
        int d = rand()%20 + 1;
        if(((int*)student)[0] >= d)
            {
                
                ((int*)student)[0] = 0;
                write(individual[index].p[1], student, sizeof(int));
            }
        else
            {
                ((int*)student)[0] = 1;
                write(individual[index].p[1], student, sizeof(int));
                 //printf("after\n");
            }
       
    }
    
    //fflush(stdout);
    
}

void usage(char* name)
{
    fprintf(stderr, "USAGE: %s N M\n", name);
    fprintf(stderr, "N: 4 <= N <= 20 - number of students\n");
    exit(EXIT_FAILURE);
}

int main(int argc, char** argv)
{
    int n;

    if (argc != 2)
        usage(argv[0]);

    n = atoi(argv[1]);

    int fork_status;
    connection individual_pipes[n];
    int shared_pipe[2];
    for(int i=0;i<n;i++)
    {
        if(pipe(individual_pipes[i].p))
            ERR("pipe");
    }
    if(pipe(shared_pipe))
            ERR("pipe");

    for(int i=0;i<n;i++)
    {
        fflush(stdout);
        fork_status = fork();
        switch(fork_status)
        {
            case 0:
                child_job(individual_pipes, i, shared_pipe);
                exit(EXIT_SUCCESS);
            default:
                individual_pipes[i].pid = fork_status;
        }
    }
    parent_work(individual_pipes,n,shared_pipe);

    while(wait(NULL)>0);
    for(int i=0;i<n;i++)
    {
        if(close(individual_pipes[i].p[1]))
            ERR("close");
    }
    if(close(shared_pipe[0]))
        ERR("close");
    printf("IT IS FINALLY OVER!\n");
    exit(EXIT_SUCCESS);
}
